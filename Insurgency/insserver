#!/bin/bash
# Insurgency
# Server Management Script
# Author: Daniel Gibbs
# Website: http://gameservermanagers.com

version="180116"

# File fetching settings
# Github Branch Select
# Allows for the use of different function files
# from a different repo and/or branch.
githubuser="jaredballou"
githubrepo="linuxgsm"
githubbranch="master"

#### Variables ####

# The name of this script file, used to show the LGSM link properly
selfname=$(basename $(readlink -f "${BASH_SOURCE[0]}"))

# Name of this service (for symlinked instances)
servicename="$(basename $0)"

# Directories

# Script root
rootdir="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
# LGSM Support Files
lgsmdir="${rootdir}/lgsm"
# Temporary path to store and manipulate settings
settingsdir="${lgsmdir}/settings.tmp"
# Supported Game Data
gamesdir="${lgsmdir}/games"
# Config path for local instances
scriptcfgdir="${lgsmdir}/cfg/servers"

# Debugging, if debugflag exists send output to $debuglog
debugflag="${lgsmdir}/.dev-debug"
debuglog="${lgsmdir}/dev-debug.log"
if [ -f "${debugflag}" ]; then
	exec 5>${debuglog}
	BASH_XTRACEFD="5"
	set -x
fi

#ipaddr=$(ip addr show $(ip route | grep '^default' | awk '{print $NF}') | grep 'inet ' | awk '{print $2}' | cut -f1  -d'/')

##### Script #####
# Do not edit

# fn_colortext color msg
# Display a message with a color code
# Paremeters:
# color: Numeric color code
# msg: Message. This includes all further paremeters, so there is no need to quote a message with spaces in it.
fn_colortext(){
	color=$1
	msg=${@:2}
	echo -e "\e[0;${color}m${msg}\e[0m"
}

# Set fetchcmd to the full path of whatever command we can to fetch files
for fetchcmd in curl wget
do
	paths="$(command -v ${fetchcmd} 2>/dev/null) $(which ${fetchcmd} >/dev/null 2>&1) /usr/bin/${fetchcmd} /bin/${fetchcmd} /usr/sbin/${fetchcmd} /sbin/${fetchcmd} $(echo $PATH | sed "s/\([:]\|\$\)/\/${fetchcmd} /g")"
	for tp in $paths
	do
		if [ -x $tp ]; then
			fetchcmd=$tp
			break 2
		fi
	done
done
# If we have no executable fetchcmd, fail script execution
if [ ! -x "${fetchcmd}" ]; then
	fn_colortext 31 FAIL
	echo "Cannot find curl or wget!"
	exit 1
fi

# fn_getgithubfile filename [exec] [url]
# Download file from Github
# Parameters:
# filename: The path of the file in reference to the repository root
# exec: Optional, set to 1 to make file executable
# url: Optional, set to full path under repository root if different than filename
fn_getgithubfile(){
	filename=$1
	exec=$2
	fileurl=${3:-$filename}
	filepath="${lgsmdir}/${filename}"
	filedir=$(dirname "${filepath}")
	# If the function file is missing, then download
	if [ ! -f "${filepath}" ]; then
		if [ ! -d "${filedir}" ]; then
			mkdir "${filedir}"
		fi
		githuburl="https://raw.githubusercontent.com/${githubuser}/${githubrepo}/${githubbranch}/${fileurl}"
		echo -e "    fetching ${filename} (${githuburl})\c"
		if [ "$(basename ${fetchcmd})" == "curl" ]; then
			cmd="$fetchcmd -s --fail -o"
		elif [ "$(basename ${fetchcmd})" == "wget" ]; then
			cmd="$fetchcmd -O"
		fi
		fetch=$($cmd "${filepath}" "${githuburl}" 2>&1)
		if [ "${exec}" ]; then
			chmod +x "${filepath}"
		fi
	fi
	if [ "${exec}" ]; then
		source "${filepath}"
	fi
}

#### Advanced Variables ####
# Directories
lockselfname=".${servicename}.lock"
filesdir="${rootdir}/serverfiles"
systemdir="${filesdir}/${game}"
executabledir="${filesdir}"
executable="./srcds_linux"
servercfg="${servicename}.cfg"
servercfgdir="${systemdir}/cfg"
servercfgfullpath="${servercfgdir}/${servercfg}"
servercfgdefault="${servercfgdir}/lgsm-default.cfg"
backupdir="${lgsmdir}/backups"

#In the event that you have library issues after an update, this may resolve it.
#export LD_LIBRARY_PATH="${filesdir}:${filesdir}/bin:${LD_LIBRARY_PATH}"

# Logging
gamelogdir="${systemdir}/logs"
scriptlogdir="${lgsmdir}/log/script"
consolelogdir="${lgsmdir}/log/console"

scriptlog="${scriptlogdir}/${servicename}-script.log"
consolelog="${consolelogdir}/${servicename}-console.log"
emaillog="${scriptlogdir}/${servicename}-email.log"

scriptlogdate="${scriptlogdir}/${servicename}-script-$(date '+%d-%m-%Y-%H-%M-%S').log"
consolelogdate="${consolelogdir}/${servicename}-console-$(date '+%d-%m-%Y-%H-%M-%S').log"

# fn_runfunction
fn_runfunction(){
	scriptfile=${1:-$functionfile}
	functionfile=$scriptfile
	fn_getgithubfile "functions/${functionfile}" 1
}

# core_functions.sh
#core_functions.sh(){
#	# Functions are defined in core_functions.sh.
#	fn_runfunction "${FUNCNAME}"
#}

fn_runfunction game_settings.sh
fn_runfunction core_functions.sh

getopt=$1
core_getopt.sh
