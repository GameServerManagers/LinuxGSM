#!/bin/bash
# Insurgency
# Server Management Script
# Author: Daniel Gibbs
# Website: http://gameservermanagers.com

version="110116"

#### Variables ####

# The name of this script file, used to show the LGSM link properly
selfname=$(basename $(readlink -f "${BASH_SOURCE[0]}"))

# Directories
rootdir="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
scriptcfgdir="${rootdir}/cfg/servers"

# Debugging, if debugflag exists send output to $debuglog
debugflag="${rootdir}/.dev-debug"
debuglog="${rootdir}/dev-debug.log"
if [ -f "${debugflag}" ]; then
	exec 5>${debuglog}
	BASH_XTRACEFD="5"
	set -x
fi

# Settings to get before config parsing begins
engine="source"
# Game name for file paths
game="insurgency"
# Name for subdirectory in GitHub repo
gamename="Insurgency"
# Name of this service (for symlinked instances)
servicename="$(basename $0)"

# File fetching settings
# Github Branch Select
# Allows for the use of different function files
# from a different repo and/or branch.
githubuser="jaredballou"
githubrepo="linuxgsm"
githubbranch="master"

#ipaddr=$(ip addr | grep 'state UP' -A2 | tail -n1 | awk '{print $2}' | cut -f1  -d'/')

# Config files
cfg_default="${scriptcfgdir}/_default.cfg"
cfg_common="${scriptcfgdir}/_common.cfg"
cfg_instance="${scriptcfgdir}/${servicename}.cfg"

#If config directory does not exist, create it
if [ ! -e $scriptcfgdir ]; then mkdir -p "$scriptcfgdir"; fi

# If default config does not exist, create it. This should come from Git, and will be overwritten by updates.
# Rather than try to wget it from Github or other fancy ways to get it, the simplest way to ensure it works is to simply create it here.
fn_create_default_config(){
	echo "Creating default config at ${cfg_default}"
	cat <<'EOF' > $cfg_default
		# Default config - Changes will be overwritten by updates.
		# Your settings for all servers go in _common.cfg
		# Server-specific settings go into $SERVER.cfg
		appid="237410"
		beta="" #To enable beta, use " -beta beta"
		clientport="27005"
		defaultmap="ministry"
		defaultmode="checkpoint"
		email="email@example.com"
		emailnotification="off" # (on|off)
		ip="0.0.0.0"
		lgsm_version="110116"
		logdays="7"
		mapcyclefile="mapcycle.txt"
		maxplayers="16"
		playlist="custom"
		port="27015"
		sourcetvport="27020"
		srcds_parms=""
		steampass=""
		steamuser="anonymous"
		updateonstart="off"
EOF
}

# If defaults are missing, or from an older version, overwrite the file
# TODO: Perhaps pull this from Git instead?
cfgver=$(grep lgsm_version ${cfg_default} 2>/dev/null | cut -d'=' -f2 | sed -e 's/["]//g')
if [ "${cfgver}" != "${version}" ]; then fn_create_default_config; fi

# Load defaults
source $cfg_default

# Load sitewide common settings (so that Git updates can safely overwrite default.cfg)
if [ ! -f $cfg_common ]; then touch $cfg_common; else source $cfg_common; fi

# Load instance specific settings
if [ ! -f $cfg_instance ]; then touch $cfg_instance; else source $cfg_instance; fi

# Set the paramaters to send to srcds
# https://developer.valvesoftware.com/wiki/Command_Line_Options#Source_Dedicated_Server
fn_parms(){
#TODO: Put in some conditional logic to handle generating the parm string so we can make this a little less game specific
parms="-game ${game} -strictportbind -ip ${ip} -port ${port} +clientport ${clientport} +tv_port ${sourcetvport} +sv_playlist ${playlist} +mapcyclefile ${mapcyclefile} +servercfgfile ${servercfg} +map ${defaultmap} ${defaultmode} -maxplayers ${maxplayers} ${srcds_parms}"
}

#### Advanced Variables ####
# Directories
lockselfname=".${servicename}.lock"
filesdir="${rootdir}/serverfiles"
systemdir="${filesdir}/insurgency"
executabledir="${filesdir}"
executable="./srcds_linux"
servercfg="${servicename}.cfg"
servercfgdir="${systemdir}/cfg"
servercfgfullpath="${servercfgdir}/${servercfg}"
servercfgdefault="${servercfgdir}/lgsm-default.cfg"
backupdir="${rootdir}/backups"

#In the event that you have library issues after an update, this may resolve it.
#export LD_LIBRARY_PATH="${filesdir}:${filesdir}/bin:${LD_LIBRARY_PATH}"

# Logging
gamelogdir="${systemdir}/logs"
scriptlogdir="${rootdir}/log/script"
consolelogdir="${rootdir}/log/console"

scriptlog="${scriptlogdir}/${servicename}-script.log"
consolelog="${consolelogdir}/${servicename}-console.log"
emaillog="${scriptlogdir}/${servicename}-email.log"

scriptlogdate="${scriptlogdir}/${servicename}-script-$(date '+%d-%m-%Y-%H-%M-%S').log"
consolelogdate="${consolelogdir}/${servicename}-console-$(date '+%d-%m-%Y-%H-%M-%S').log"

##### Script #####
# Do not edit

# fn_colortext color msg
# Display a message with a color code
# Paremeters:
# color: Numeric color code
# msg: Message. This includes all further paremeters, so there is no need to quote a message with spaces in it.
fn_colortext(){
	color=$1
	msg=${@:2}
	echo -e "\e[0;${color}m${msg}\e[0m"
}

# Set fetchcmd to the full path of whatever command we can to fetch files
for fetchcmd in curl wget
do
	paths="$(command -v ${fetchcmd} 2>/dev/null) $(which ${fetchcmd} >/dev/null 2>&1) /usr/bin/${fetchcmd} /bin/${fetchcmd} /usr/sbin/${fetchcmd} /sbin/${fetchcmd} $(echo $PATH | sed "s/\([:]\|\$\)/\/${fetchcmd} /g")"
	for tp in $paths
	do
		if [ -x $tp ]; then
			fetchcmd=$tp
			break 2
		fi
	done
done
echo "mark"
# If we have no executable fetchcmd, fail script execution
if [ ! -x "${fetchcmd}" ]; then
	fn_colortext 31 FAIL
	echo "Cannot find curl or wget!"
	exit 1
fi

# fn_getgithubfile filename [exec] [url]
# Download file from Github
# Parameters:
# filename: The path of the file in reference to the repository root
# exec: Optional, set to 1 to make file executable
# url: Optional, set to full path under repository root if different than filename
fn_getgithubfile(){
	filename=$1
	exec=$2
	fileurl=${3:-$filename}
	filepath="${rootdir}/${filename}"
	filedir=$(dirname "${filepath}")
	# If the function file is missing, then download
	if [ ! -f "${filepath}" ]; then
		if [ ! -d "${filedir}" ]; then
			mkdir "${filedir}"
		fi
		githuburl="https://raw.githubusercontent.com/${githubuser}/${githubrepo}/${githubbranch}/${fileurl}"
		echo -e "    fetching ${filename} (${githuburl})\c"
		if [ "$(basename ${fetchcmd})" == "curl" ]; then
			cmd="$fetchcmd --fail -o"
		elif [ "$(basename ${fetchcmd})" == "wget" ]; then
			cmd="$fetchcmd -O"
		fi
		fetch=$($cmd "${filepath}" "${githuburl}" 2>&1)
		echo $?
		echo $fetch
		if [ "${exec}" ]; then
			chmod +x "${filepath}"
		fi
	fi
	if [ "${exec}" ]; then
		source "${filepath}"
	fi
}

echo "mark"
# fn_runfunction
fn_runfunction(){
	fn_getgithubfile "functions/${functionfile}" 1
}

echo "mark"
# core_functions.sh
core_functions.sh(){
	# Functions are defined in core_functions.sh.
	functionfile="${FUNCNAME}"
	fn_runfunction
}

echo "mark"
core_functions.sh

echo "mark"
getopt=$1
core_getopt.sh
echo "mark"
echo "done"
